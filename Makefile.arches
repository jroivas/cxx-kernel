ifndef ARCH
$(error ERROR: ARCH must be defined)
endif

#include config.mk
ifneq (all,$(ARCH))
include config_$(ARCH).mk
endif

CXXFLAGS:=$(CXXFLAGS) -I. -Iarch -Iinc
#CXXFLAGSO:=-O2 $(CXXFLAGSO) -I. -Iarch
CXXFLAGSO:=$(CXXFLAGSO) -I. -Iarch -Iinc
OBJS=arch/loader.o src/kernel.o src/video.o src/main.o src/cxa.o src/mutex.o src/local.o src/operators.o src/mm.o src/paging.o src/gdt.o src/string.o src/idt.o src/timer.o src/kb.o src/fb.o src/math.o src/states.o src/setjmp.o src/bits.o src/font.o src/pci.o src/ata.o src/storage.o src/task.o src/list.o src/processmanager.o src/syscall.o
ifeq (x86,$(ARCH))
THIRDPARTY=3rdparty/my_x86emu/x86emu.o 3rdparty/font/boot_font.o
else
THIRDPARTY=3rdparty/font/boot_font.o
endif

LIBS=

.PHONY: all clean x86 arm arm-qemu linux

all: $(ARCH)
	@echo Building $(ARCH)
	

config_h_pre:
	echo '#ifndef CONFIG_H' > config.h
	echo '#define CONFIG_H' >> config.h

config_h_post:
	echo '#endif' >> config.h

config_h_x86:
	echo '#define ARCH_x86' >> config.h

config_h_arm:
	echo '#define ARCH_ARM' >> config.h

config_h_linux:
	echo '#define ARCH_LINUX' >> config.h

x86: config_h_pre config_h_x86 config_h_post kernel_x86 kernel.iso

arm: config_h_pre config_h_arm config_h_post kernel_arm

arm-qemu: arm

linux: config_h_pre config_h_linux config_h_post kernel_linux

run_qemu: kernel
	qemu -kernel kernel

kernel_linux: link2.ld arch_$(ARCH) $(OBJS) $(LIBS) 3rdparty_libs
	$(CXX) -o kernel_$(ARCH) $(OBJS) arch/platform.o arch/$(ARCH)/*.o $(THIRDPARTY) -lc -lpthread -lX11

kernel_x86: link2.ld arch_$(ARCH) $(OBJS) arch/$(ARCH)/$(ARCH).a $(LIBS) 3rdparty_libs
	$(LD) -m elf_i386 -nostdlib -T link2.ld -o kernel_$(ARCH) $(OBJS) arch/platform.o arch/$(ARCH)/*.o $(THIRDPARTY)
	#$(LD) -m elf_i386 -nostdlib -T link2.ld -o kernel_$(ARCH) /usr/lib/gcc/x86_64-linux-gnu/4.9/crtbegin.o /usr/lib/x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/4.9/crtbegin.o $(OBJS) arch/platform.o arch/$(ARCH)/*.o $(THIRDPARTY)
	#$(CXX) -m32 -Xlinker -T -Xlinker link2.ld -ffreestanding -fno-builtin -nostdlib -s  -o  kernel $(OBJS) arch/platform.o arch/$(ARCH)/*.o $(THIRDPARTY)

kernel_arm: link_$(ARCH).ld arch_$(ARCH) $(OBJS) arch/$(ARCH)/$(ARCH).a $(LIBS) 3rdparty_libs
	#$(LD) -m armelf -nostdlib -T link_$(ARCH)$(PLATFORM).ld -o kernel_$(ARCH)$(PLATFORM) $(OBJS) arch/platform.o arch/$(ARCH)/*.o $(THIRDPARTY)
	$(LD) --no-undefined -nostdlib -T link_$(ARCH)$(PLATFORM).ld -o kernel_$(ARCH)$(PLATFORM) $(OBJS) arch/platform.o arch/$(ARCH)/*.o $(THIRDPARTY)
	#~/bin/arm-2008q3/bin/arm-none-eabi-objcopy kernel_armpi -O binary kernel.img

kernel.iso: kernel_x86 menu.lst stage2_eltorito
	mkdir -p isofiles/boot/grub
	cp -f kernel_x86 isofiles/boot/kernel
	cp -f stage2_eltorito isofiles/boot/grub/
	cp -f menu.lst isofiles/boot/grub/
	genisoimage -R -b boot/grub/stage2_eltorito -no-emul-boot -quiet -boot-load-size 4 -boot-info-table -o kernel.iso ./isofiles

run_x86: x86 kernel.iso test.img
	#qemu -serial mon:stdio -no-kvm -cdrom kernel.iso
	#qemu -serial mon:stdio -cdrom kernel.iso -hda test.img
	kvm -serial mon:stdio -cdrom kernel.iso -hda test.img

run_arm: arm kernel_arm test.img
	#qemu-system-arm kernel_arm -hda test.img
	qemu-system-arm -serial mon:stdio -M versatilepb -m 128M -kernel kernel_armqemu
	#qemu-system-arm -serial mon:stdio -m 128M -kernel kernel_arm
	#qemu-system-arm  -M versatilepb -m 8M -kernel kernel_arm

run_linux: kernel_linux
	./kernel_linux

test.img:
	qemu-img info test.img || qemu-img create -f raw test.img 256M

3rdparty_libs:
	make TOPDIR=$(shell pwd) -C 3rdparty

3rdparty/libx86emu.a:
	make TOPDIR=$(shell pwd) -C 3rdparty

.cpp.o:
	$(CXX) -c $(CXXFLAGSO) -o $@ $< 

.c.o:
	$(CC) -c $(CXXFLAGSO) -o $@ $< 

gdt.o: gdt.cpp gdt.h

idt.o: idt.cpp idt.h

timer.o: timer.cpp timer.h
	$(CXX) -c $(CXXFLAGS) -o $@ $< 

kernel.o: kernel.cpp kernel.h
	$(CXX) -c $(CXXFLAGS) -o $@ $< 

arch_$(ARCH):
	make TOPDIR=$(shell pwd) ARCH=$(ARCH) -C arch

#arch_x86:
#	make TOPDIR=$(shell pwd) ARCH=x86 -C arch
#
#arch_arm:
#	make TOPDIR=$(shell pwd) ARCH=arm -C arch
#
#arch_linux:
#	make TOPDIR=$(shell pwd) ARCH=linux -C arch

clean:
	rm -f config.h
	make -C arch clean
	make -C 3rdparty clean
	rm -f kernel_* kernel.iso *.o *.a
	rm -f 3drparty/font/*.o
	rm -f src/*.o
